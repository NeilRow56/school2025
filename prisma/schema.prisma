// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_UNPOOLED") // uses a direct connection
}


model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model BookCategory {
  category_id         Int                   @id @default(autoincrement())
  category_name       String                @db.VarChar(255)
  bookCategoryLinks   BookCategoryLink[]

   @@map("categories")
}

model Book {
  bookId              Int                   @id @default(autoincrement())
  isbn                String                @db.VarChar(13)
  name                String                @db.VarChar(255)
  author              String                @db.VarChar(80)
  noOfCopies          Int                   @db.SmallInt
  isActive            Boolean               @default(true)
  publishYear         Int                   @db.SmallInt
  createdAt           DateTime              @default(now()) @db.Timestamp(0)
  updatedAt           DateTime              @default(now()) @db.Timestamp(0)
  bookCategoryLinks   BookCategoryLink[]
  bookPhotos          BookPhoto[]
  borrowings          Borrowing[]
  ratings             Rating[]
  reservations        Reservation[]
  staffPicks          StaffPick[]

   @@map("books")
}

model BookCategoryLink {
  bookId         Int
  categoryId     Int
  books           Book           @relation(fields: [bookId], references: [bookId], onDelete: Cascade, onUpdate: NoAction, map: "book_category_links_ibfk_1")
  bookCategories  BookCategory @relation(fields: [categoryId], references: [category_id], onDelete: Cascade, onUpdate: NoAction, map: "book_category_links_ibfk_2")

  @@id([bookId, categoryId])
  @@index([categoryId])

   @@map("book_category_links")
}

model Activity {
  activityId     Int               @id @default(autoincrement())
  title           String            @db.VarChar(255)
  description     String?           @db.Text
  activityDate    DateTime          @db.Date
  startTime       String            @db.VarChar(10)
  endTime         String            @db.VarChar(10)
  ageGroup        String?           @db.VarChar(20)
  capacity        Int?
  photoUrl        String?           @db.VarChar(1024)
  createdAt       DateTime?         @default(now()) @db.Timestamp(0)
  updated_at      DateTime?         @default(now()) @db.Timestamp(0)
  activityPhotos  ActivityPhoto[]

   @@map("activities")
}
model ActivityPhoto {
  photoId     Int        @id @default(autoincrement())
  activityId  Int
  url         String     @db.VarChar(1024)
  createdAt   DateTime?  @default(now()) @db.Timestamp(0)
  updatedAt   DateTime?  @default(now()) @db.Timestamp(0)
  activities  Activity @relation(fields: [activityId], references: [activityId], onDelete: Cascade, onUpdate: NoAction, map: "activity_photos_ibfk_1")
  @@index([activityId])

   @@map("activity_photos")
}
model BookPhoto {
  photoId    Int       @id @default(autoincrement())
  bookId     Int
  url        String    @db.VarChar(1024)
  createdAt  DateTime? @default(now()) @db.Timestamp(0)
  updatedAt  DateTime? @default(now()) @db.Timestamp(0)
  books      Book     @relation(fields: [bookId], references: [bookId], onDelete: Cascade, onUpdate: NoAction, map: "book_photos_ibfk_1")
  @@index([bookId])

   @@map("book_photos")
}
model Borrowing {
  borrowingId  Int       @id @default(autoincrement())
  bookId       Int
  userId       Int
  borrowDate   DateTime  @db.Date
  dueDate      DateTime  @db.Date
  returnDate   DateTime? @db.Date
  books        Book     @relation(fields: [bookId], references: [bookId], onDelete: NoAction, onUpdate: NoAction, map: "borrowings_ibfk_1")
  users        User     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "borrowings_ibfk_2")
  fines        Fine[]
  @@index([bookId])
  @@index([userId])

   @@map("borrowings")
}
model Fine {
  fineId       Int        @id @default(autoincrement())
  borrowingId  Int
  userId       Int
  fineAmount   Decimal    @db.Decimal(10, 2)
  fineDate     DateTime   @db.Date
  paidDate     DateTime?  @db.Date
  borrowings   Borrowing @relation(fields: [borrowingId], references: [borrowingId], onDelete: NoAction, onUpdate: NoAction, map: "fines_ibfk_1")
  users        User      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fines_ibfk_2")
  @@index([borrowingId], map: "borrowingId")
  @@index([userId])

   @@map("fines")
}
model Rating {
  ratingId   Int      @id @default(autoincrement())
  bookId     Int
  userId     Int
  rating     Int      
  review     String?  @db.Text
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  books      Book    @relation(fields: [bookId], references: [bookId], onDelete: NoAction, onUpdate: NoAction, map: "ratings_ibfk_1")
  users      User    @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "ratings_ibfk_2")
  @@index([bookId])
  @@index([userId])

   @@map("ratings")
}
model Reservation {
  reservationId    Int      @id @default(autoincrement())
  bookId           Int
  userId           Int
  reservationDate  DateTime @db.Date
  expirationDate   DateTime @db.Date
  books            Book    @relation(fields: [bookId], references: [bookId], onDelete: NoAction, onUpdate: NoAction, map: "reservations_ibfk_1")
  users            User   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "reservations_ibfk_2")
  @@index([bookId])
  @@index([userId])

   @@map("reservations")
}
model StaffPick {
  pickId    Int      @id @default(autoincrement())
  bookId    Int
  userId    Int
  pickDate  DateTime @db.Date
  books     Book    @relation(fields: [bookId], references: [bookId], onDelete: NoAction, onUpdate: NoAction, map: "staffPicks_ibfk_1")
  users     User    @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "staffPicks_ibfk_2")
  @@index([bookId], map: "bookId")
  @@index([userId], map: "userId")

   @@map("staffPicks")
}

model User {
  userId          Int            @id @default(autoincrement())
  email           String         @unique(map: "email") @db.VarChar(100)
  name            String         @db.VarChar(80)
  image           String          @db.VarChar(190)
  password        String          @db.VarChar(100)
  libraryCardNo   String          @db.VarChar(10)
  profileStatus   String?        @db.VarChar(10)
  role            String         @db.VarChar(10)
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now()) @db.Timestamp(0)
  updatedAt       DateTime       @default(now()) @db.Timestamp(0)
  lastLoginAt     DateTime?      @db.Timestamp(0)
  borrowings      Borrowing[]
  fines           Fine[]
  ratings         Rating[]
  reservations    Reservation[]
  staffPicks      StaffPick[]

   @@map("users")
}



enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}